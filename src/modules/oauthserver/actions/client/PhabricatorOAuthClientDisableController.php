<?php

namespace orangins\modules\oauthserver\actions\client;

use orangins\lib\response\Aphront404Response;
use orangins\lib\response\AphrontRedirectResponse;
use orangins\modules\oauthserver\models\PhabricatorOAuthServerClient;
use orangins\modules\oauthserver\models\PhabricatorOAuthServerTransaction;
use orangins\modules\oauthserver\editor\PhabricatorOAuthServerEditor;
use orangins\modules\oauthserver\query\PhabricatorOAuthServerClientQuery;
use orangins\modules\policy\capability\PhabricatorPolicyCapability;

/**
 * Class PhabricatorOAuthClientDisableController
 * @package orangins\modules\oauthserver\actions\client
 * @author 陈妙威
 */
final class PhabricatorOAuthClientDisableController
    extends PhabricatorOAuthClientController
{

    /**
     * @return Aphront404Response|AphrontRedirectResponse|\orangins\lib\view\AphrontDialogView
     * @throws \PhutilInvalidStateException
     * @throws \PhutilJSONParserException
     * @throws \PhutilMethodNotImplementedException
     * @throws \PhutilTypeExtraParametersException
     * @throws \PhutilTypeMissingParametersException
     * @throws \ReflectionException
     * @throws \orangins\modules\transactions\exception\PhabricatorApplicationTransactionStructureException
     * @throws \orangins\modules\transactions\exception\PhabricatorApplicationTransactionValidationException
     * @throws \orangins\modules\transactions\exception\PhabricatorApplicationTransactionWarningException
     * @throws \yii\base\InvalidConfigException
     * @throws \Exception
     * @author 陈妙威
     */
    public function run()
    {
        $request = $this->getRequest();
        $viewer = $this->getViewer();

        $client = PhabricatorOAuthServerClient::find()
            ->setViewer($viewer)
            ->withIDs(array($request->getURIData('id')))
            ->requireCapabilities(
                array(
                    PhabricatorPolicyCapability::CAN_VIEW,
                    PhabricatorPolicyCapability::CAN_EDIT,
                ))
            ->executeOne();
        if (!$client) {
            return new Aphront404Response();
        }

        $done_uri = $client->getViewURI();
        $is_disable = !$client->getIsDisabled();

        if ($request->isFormPost()) {
            $xactions = array();

            $xactions[] = (new  PhabricatorOAuthServerTransaction())
                ->setTransactionType(PhabricatorOAuthServerTransaction::TYPE_DISABLED)
                ->setNewValue((int)$is_disable);

            $editor = (new  PhabricatorOAuthServerEditor())
                ->setActor($viewer)
                ->setContentSourceFromRequest($request)
                ->setContinueOnNoEffect(true)
                ->setContinueOnMissingFields(true)
                ->applyTransactions($client, $xactions);

            return (new  AphrontRedirectResponse())->setURI($done_uri);
        }

        if ($is_disable) {
            $title = pht('Disable OAuth Application');
            $body = pht(
                'Really disable the %s OAuth application? Users will no longer be ' .
                'able to authenticate against it, nor access Phabricator using ' .
                'tokens generated by this application.',
                phutil_tag('strong', array(), $client->getName()));
            $button = pht('Disable Application');
        } else {
            $title = pht('Enable OAuth Application');
            $body = pht(
                'Really enable the %s OAuth application? Users will be able to ' .
                'authenticate against it, and existing tokens will become usable ' .
                'again.',
                phutil_tag('strong', array(), $client->getName()));
            $button = pht('Enable Application');
        }

        return $this->newDialog()
            ->setTitle($title)
            ->appendParagraph($body)
            ->addCancelButton($done_uri)
            ->addSubmitButton($button);
    }

}
