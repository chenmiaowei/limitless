<?php

namespace orangins\modules\conduit\actions;

use orangins\lib\response\Aphront404Response;
use orangins\lib\response\AphrontRedirectResponse;
use orangins\lib\view\form\AphrontFormView;
use orangins\lib\view\form\control\AphrontFormTextControl;
use orangins\modules\auth\engine\PhabricatorAuthSessionEngine;
use orangins\modules\conduit\models\PhabricatorConduitToken;
use orangins\modules\conduit\settings\PhabricatorConduitTokensSettingsPanel;
use orangins\modules\phid\query\PhabricatorObjectQuery;
use orangins\modules\policy\capability\PhabricatorPolicyCapability;
use yii\helpers\Url;

/**
 * Class PhabricatorConduitTokenEditController
 * @package orangins\modules\conduit\actions
 * @author 陈妙威
 */
final class PhabricatorConduitTokenEditController
    extends PhabricatorConduitController
{

    /**
     * @return Aphront404Response|AphrontRedirectResponse|\orangins\lib\view\AphrontDialogView
     * @throws \AphrontQueryException
     * @throws \PhutilInvalidStateException
     * @throws \ReflectionException
     * @throws \yii\base\Exception
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\db\IntegrityException
     * @author 陈妙威
     */
    public function run()
    {
        $request = $this->getRequest();
        $viewer = $request->getViewer();
        $id = $request->getURIData('id');

        if ($id) {
            $token = PhabricatorConduitToken::find()
                ->setViewer($viewer)
                ->withIDs(array($id))
                ->withExpired(false)
                ->requireCapabilities(
                    array(
                        PhabricatorPolicyCapability::CAN_VIEW,
                        PhabricatorPolicyCapability::CAN_EDIT,
                    ))
                ->executeOne();
            if (!$token) {
                return new Aphront404Response();
            }

            $object = $token->getObject();

            $is_new = false;
            $title = \Yii::t("app", 'View API Token');
        } else {
            $object = (new PhabricatorObjectQuery())
                ->setViewer($viewer)
                ->withPHIDs(array($request->getStr('objectPHID')))
                ->requireCapabilities(
                    array(
                        PhabricatorPolicyCapability::CAN_VIEW,
                        PhabricatorPolicyCapability::CAN_EDIT,
                    ))
                ->executeOne();
            if (!$object) {
                return new Aphront404Response();
            }

            $token = PhabricatorConduitToken::initializeNewToken(
                $object->getPHID(),
                PhabricatorConduitToken::TYPE_STANDARD);

            $is_new = true;
            $title = \Yii::t("app", 'Generate API Token');
            $submit_button = \Yii::t("app", 'Generate Token');
        }

        $panel_uri = (new PhabricatorConduitTokensSettingsPanel())
            ->setViewer($viewer)
            ->setUser($object)
            ->getPanelURI();

        (new PhabricatorAuthSessionEngine())->requireHighSecuritySession(
            $viewer,
            $request,
            $panel_uri);

        if ($request->isFormPost()) {
            $token->save();

            if ($is_new) {
                $token_uri = Url::to(['/conduit/token/edit', 'id' => $token->getID()]);
            } else {
                $token_uri = $panel_uri;
            }

            return (new AphrontRedirectResponse())->setURI($token_uri);
        }

        $dialog = $this->newDialog()
            ->addClass("wmin-600")
            ->setTitle($title)
            ->addHiddenInput('objectPHID', $object->getPHID());

        if ($is_new) {
            $dialog
                ->appendParagraph(\Yii::t("app", 'Generate a new API token?'))
                ->addSubmitButton($submit_button)
                ->addCancelButton($panel_uri);
        } else {
            $form = (new AphrontFormView())
                ->setUser($viewer);

            if ($token->getTokenType() === PhabricatorConduitToken::TYPE_CLUSTER) {
                $dialog->appendChild(
                    \Yii::t("app",
                        'This token is automatically generated by Phabricator, and used ' .
                        'to make requests between nodes in a Phabricator cluster. You ' .
                        'can not use this token in external applications.'));
            } else {
                $form->appendChild(
                    (new AphrontFormTextControl())
                        ->setLabel(\Yii::t("app", 'Token'))
                        ->setValue($token->getToken()));
            }

            $dialog
                ->appendForm($form)
                ->addCancelButton($panel_uri, \Yii::t("app", 'Done'));
        }

        return $dialog;
    }

}
